// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// asdgCMatrix_
SEXP asdgCMatrix_(SEXP XX_);
RcppExport SEXP _SCRABBLE_asdgCMatrix_(SEXP XX_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP);
    rcpp_result_gen = Rcpp::wrap(asdgCMatrix_(XX_));
    return rcpp_result_gen;
END_RCPP
}
// mSparse
Eigen::VectorXd mSparse(SEXP As, SEXP bs);
RcppExport SEXP _SCRABBLE_mSparse(SEXP AsSEXP, SEXP bsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type As(AsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type bs(bsSEXP);
    rcpp_result_gen = Rcpp::wrap(mSparse(As, bs));
    return rcpp_result_gen;
END_RCPP
}
// mMatrix
Eigen::VectorXd mMatrix(SEXP As, SEXP bs);
RcppExport SEXP _SCRABBLE_mMatrix(SEXP AsSEXP, SEXP bsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type As(AsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type bs(bsSEXP);
    rcpp_result_gen = Rcpp::wrap(mMatrix(As, bs));
    return rcpp_result_gen;
END_RCPP
}
// mSparseT
Eigen::VectorXd mSparseT(SEXP As, SEXP bs);
RcppExport SEXP _SCRABBLE_mSparseT(SEXP AsSEXP, SEXP bsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type As(AsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type bs(bsSEXP);
    rcpp_result_gen = Rcpp::wrap(mSparseT(As, bs));
    return rcpp_result_gen;
END_RCPP
}
// mMatrixT
Eigen::VectorXd mMatrixT(SEXP As, SEXP bs);
RcppExport SEXP _SCRABBLE_mMatrixT(SEXP AsSEXP, SEXP bsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type As(AsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type bs(bsSEXP);
    rcpp_result_gen = Rcpp::wrap(mMatrixT(As, bs));
    return rcpp_result_gen;
END_RCPP
}
// getZ
Eigen::MatrixXd getZ(SEXP As, SEXP bs);
RcppExport SEXP _SCRABBLE_getZ(SEXP AsSEXP, SEXP bsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type As(AsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type bs(bsSEXP);
    rcpp_result_gen = Rcpp::wrap(getZ(As, bs));
    return rcpp_result_gen;
END_RCPP
}
// getA
Eigen::MatrixXd getA(SEXP As, SEXP betas, SEXP gammas, SEXP ns);
RcppExport SEXP _SCRABBLE_getA(SEXP AsSEXP, SEXP betasSEXP, SEXP gammasSEXP, SEXP nsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type As(AsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gammas(gammasSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ns(nsSEXP);
    rcpp_result_gen = Rcpp::wrap(getA(As, betas, gammas, ns));
    return rcpp_result_gen;
END_RCPP
}
// getB
Eigen::MatrixXd getB(SEXP Ds, SEXP Zs, SEXP Ys, SEXP betas);
RcppExport SEXP _SCRABBLE_getB(SEXP DsSEXP, SEXP ZsSEXP, SEXP YsSEXP, SEXP betasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Ds(DsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Zs(ZsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type betas(betasSEXP);
    rcpp_result_gen = Rcpp::wrap(getB(Ds, Zs, Ys, betas));
    return rcpp_result_gen;
END_RCPP
}
// ToDense
Eigen::MatrixXd ToDense(SEXP newXs);
RcppExport SEXP _SCRABBLE_ToDense(SEXP newXsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type newXs(newXsSEXP);
    rcpp_result_gen = Rcpp::wrap(ToDense(newXs));
    return rcpp_result_gen;
END_RCPP
}
// ToSparse
Eigen::SparseMatrix<double> ToSparse(SEXP newXs);
RcppExport SEXP _SCRABBLE_ToSparse(SEXP newXsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type newXs(newXsSEXP);
    rcpp_result_gen = Rcpp::wrap(ToSparse(newXs));
    return rcpp_result_gen;
END_RCPP
}
// cDescent
Eigen::MatrixXd cDescent(SEXP gamma_Y_B_Lambdas, SEXP As, SEXP zoness, SEXP newXs, SEXP nIters, SEXP error_thresholds);
RcppExport SEXP _SCRABBLE_cDescent(SEXP gamma_Y_B_LambdasSEXP, SEXP AsSEXP, SEXP zonessSEXP, SEXP newXsSEXP, SEXP nItersSEXP, SEXP error_thresholdsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type gamma_Y_B_Lambdas(gamma_Y_B_LambdasSEXP);
    Rcpp::traits::input_parameter< SEXP >::type As(AsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type zoness(zonessSEXP);
    Rcpp::traits::input_parameter< SEXP >::type newXs(newXsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type nIters(nItersSEXP);
    Rcpp::traits::input_parameter< SEXP >::type error_thresholds(error_thresholdsSEXP);
    rcpp_result_gen = Rcpp::wrap(cDescent(gamma_Y_B_Lambdas, As, zoness, newXs, nIters, error_thresholds));
    return rcpp_result_gen;
END_RCPP
}
// getS
Eigen::SparseMatrix<double> getS(SEXP newXs, SEXP Lambdas, SEXP gammas);
RcppExport SEXP _SCRABBLE_getS(SEXP newXsSEXP, SEXP LambdasSEXP, SEXP gammasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type newXs(newXsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Lambdas(LambdasSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gammas(gammasSEXP);
    rcpp_result_gen = Rcpp::wrap(getS(newXs, Lambdas, gammas));
    return rcpp_result_gen;
END_RCPP
}
// getY
Eigen::MatrixXd getY(SEXP ss, SEXP Us, SEXP Vs);
RcppExport SEXP _SCRABBLE_getY(SEXP ssSEXP, SEXP UsSEXP, SEXP VsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Us(UsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Vs(VsSEXP);
    rcpp_result_gen = Rcpp::wrap(getY(ss, Us, Vs));
    return rcpp_result_gen;
END_RCPP
}
// calculateError
double calculateError(SEXP Xs, SEXP newXs, SEXP m1s, SEXP n1s);
RcppExport SEXP _SCRABBLE_calculateError(SEXP XsSEXP, SEXP newXsSEXP, SEXP m1sSEXP, SEXP n1sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Xs(XsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type newXs(newXsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type m1s(m1sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type n1s(n1sSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateError(Xs, newXs, m1s, n1s));
    return rcpp_result_gen;
END_RCPP
}
// updateLambda
Eigen::MatrixXd updateLambda(SEXP Lambdas, SEXP newXs, SEXP newYs, SEXP gammas);
RcppExport SEXP _SCRABBLE_updateLambda(SEXP LambdasSEXP, SEXP newXsSEXP, SEXP newYsSEXP, SEXP gammasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Lambdas(LambdasSEXP);
    Rcpp::traits::input_parameter< SEXP >::type newXs(newXsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type newYs(newYsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gammas(gammasSEXP);
    rcpp_result_gen = Rcpp::wrap(updateLambda(Lambdas, newXs, newYs, gammas));
    return rcpp_result_gen;
END_RCPP
}
// recoverData
Eigen::MatrixXd recoverData(SEXP newXs);
RcppExport SEXP _SCRABBLE_recoverData(SEXP newXsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type newXs(newXsSEXP);
    rcpp_result_gen = Rcpp::wrap(recoverData(newXs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SCRABBLE_asdgCMatrix_", (DL_FUNC) &_SCRABBLE_asdgCMatrix_, 1},
    {"_SCRABBLE_mSparse", (DL_FUNC) &_SCRABBLE_mSparse, 2},
    {"_SCRABBLE_mMatrix", (DL_FUNC) &_SCRABBLE_mMatrix, 2},
    {"_SCRABBLE_mSparseT", (DL_FUNC) &_SCRABBLE_mSparseT, 2},
    {"_SCRABBLE_mMatrixT", (DL_FUNC) &_SCRABBLE_mMatrixT, 2},
    {"_SCRABBLE_getZ", (DL_FUNC) &_SCRABBLE_getZ, 2},
    {"_SCRABBLE_getA", (DL_FUNC) &_SCRABBLE_getA, 4},
    {"_SCRABBLE_getB", (DL_FUNC) &_SCRABBLE_getB, 4},
    {"_SCRABBLE_ToDense", (DL_FUNC) &_SCRABBLE_ToDense, 1},
    {"_SCRABBLE_ToSparse", (DL_FUNC) &_SCRABBLE_ToSparse, 1},
    {"_SCRABBLE_cDescent", (DL_FUNC) &_SCRABBLE_cDescent, 6},
    {"_SCRABBLE_getS", (DL_FUNC) &_SCRABBLE_getS, 3},
    {"_SCRABBLE_getY", (DL_FUNC) &_SCRABBLE_getY, 3},
    {"_SCRABBLE_calculateError", (DL_FUNC) &_SCRABBLE_calculateError, 4},
    {"_SCRABBLE_updateLambda", (DL_FUNC) &_SCRABBLE_updateLambda, 4},
    {"_SCRABBLE_recoverData", (DL_FUNC) &_SCRABBLE_recoverData, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_SCRABBLE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
